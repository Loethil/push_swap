optimiser l'algo de 5 pour avoir 8 coups maximum peu importe les arguments.
utiliser l'algo de 5 pour cree un algo de 10 optimiser
utiliser l'algo de 10 pour cree un algo de 100 optimiser
utiliser l'algo de 100 pour l'algo de 500

idee numero 1(exemple avec l'algo de 100) :
-> rechercher les nombres de 1 a 10 dans la pile a et les faires basculer dans la pile_b.
-> utiliser l'algo de 10 dans la pile_b pour trier a l'envers dans la pile_b tout rebasculer dans la pile_q (a l'endroit du coup)
-> rechercher les nombres de 10 a 20 (i = 0 et j = 10, et une fois que tous les chiffres de 1 a 10 sont trouves, faire i += 10 et j += 10)
-> utiliser l'algo de 10 pour les nombres de 10 a 20.
et ainsi de suite, + instaurer un compteur pour connaitre avec precision le nombre de coup effectue.

algo de 3 -> 2 ou 3 
algo de 5 -> 8 - 12
algo de 100 -> 700 - 1500
algo de 500 -> 5500 - 11500



int	itab(t_liste *pile_a, t_liste *pile_b,
	t_struct *liste, int i)
{
	if (pile_a[i].place >= liste->minchunk
		&& pile_a[i].place <= liste->maxchunk)
	{
		while (i != 0)
		{
			ra(pile_a, liste);
			i--;
		}
		pb(pile_a, pile_b, liste);
		(liste->cpt)++;
		i = -1;
		(liste->height)--;
	}
	return (i);
}

int	jtab(t_liste *pile_a, t_liste *pile_b,
	t_struct *liste, int j)
{
	if (pile_a[j].place >= liste->minchunk
		&& pile_a[j].place <= liste->maxchunk)
	{
		while (j != liste->height)
		{
			rra(pile_a, liste);
			j++;
		}
		rra(pile_a, liste);
		pb(pile_a, pile_b, liste);
		(liste->cpt)++;
		(liste->height)--;
	}
	return (j);
}

void	go_to_b(t_liste *pile_a, t_liste *pile_b, t_struct *liste)
{
	int	j;
	int	i;

	liste->height = taille(pile_a);
	j = liste->height;
	i = 0;
	while (liste->cpt <= liste->maxchunk)
	{
		i = itab(pile_a, pile_b, liste, i);
		j = jtab(pile_a, pile_b, liste, j);
		i++;
		j--;
	}
}

	liste->cpt = 1;
	liste->minchunk = 89;
	liste->maxchunk = liste->len;
	while (liste->maxchunk > 0)
	{
		tri_b(pile_a, pile_b, liste);
		liste->maxchunk -= liste->len / 5;
		liste->minchunk -= liste->len / 5;
	}


// if (pile_a[i].place >= liste->minchunk
// 	&& pile_a[i].place <= liste->maxchunk)
// {
// 	while (i != 0)
// 	{
// 		ra(pile_a, liste);
// 		i--;
// 	}
// 	pb(pile_a, pile_b, liste);
// 	(liste->height)--;
// 	(liste->cpt)++;
// 	i = -1;
// }
// else if (pile_a[j].place >= liste->minchunk
// 	&& pile_a[j].place <= liste->maxchunk)
// {
// 	while (j != liste->height)
// 	{
// 		rra(pile_a, liste);
// 		j++;
// 	}
// 	rra(pile_a, liste);
// 	pb(pile_a, pile_b, liste);
// 	(liste->cpt)++;
// 	(liste->height)--;
// }



// int	itab(t_liste *pile_a, t_liste *pile_b,
// 	t_struct *liste, int i, int j)
// {
// 	j = liste->height;
// 	while (i != 0)
// 	{
// 		ra(pile_a, liste);
// 		i--;
// 	}
// 	pb(pile_a, pile_b, liste);
// 	(liste->height)--;
// 	(liste->cpt)++;
// 	i = -1;
// 	return (j);
// }

// int	jtab(t_liste *pile_a, t_liste *pile_b,
// 	t_struct *liste, int j, int i)
// {
// 	while (j != liste->height)
// 	{
// 		rra(pile_a, liste);
// 		j++;
// 	}
// 	rra(pile_a, liste);
// 	pb(pile_a, pile_b, liste);
// 	(liste->cpt)++;
// 	(liste->height)--;
// 	i = -1;
// 	return (i);
// }

	// 	if (pile_a[i].place >= liste->minchunk
	// && pile_a[i].place <= liste->maxchunk)
	// 		j = itab(pile_a, pile_b, liste, i, j);
	// 	else if (pile_a[j].place >= liste->minchunk
	// && pile_a[j].place <= liste->maxchunk)
	// 		i = jtab(pile_a, pile_b, liste, j, i);